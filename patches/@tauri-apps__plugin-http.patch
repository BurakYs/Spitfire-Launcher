diff --git a/dist-js/index.cjs b/dist-js/index.cjs
index 4509c62989742b0024ba7841f0e702d5375f5335..88f36dcb52086f01ad0e2ba8d8f96b6b3ae5d179 100644
--- a/dist-js/index.cjs
+++ b/dist-js/index.cjs
@@ -115,35 +115,38 @@ async function fetch(input, init) {
     const { status, statusText, url, headers: responseHeaders, rid: responseRid } = await core.invoke('plugin:http|fetch_send', {
         rid
     });
-    const readableStreamBody = new ReadableStream({
-        start: (controller) => {
-            const streamChannel = new core.Channel();
-            streamChannel.onmessage = (res) => {
-                // close early if aborted
-                if (signal?.aborted) {
-                    controller.error(ERROR_REQUEST_CANCELLED);
-                    return;
-                }
-                const resUint8 = new Uint8Array(res);
-                const lastByte = resUint8[resUint8.byteLength - 1];
-                const actualRes = resUint8.slice(0, resUint8.byteLength - 1);
-                // close when the signal to close (last byte is 1) is sent from the IPC.
-                if (lastByte == 1) {
-                    controller.close();
-                    return;
-                }
-                controller.enqueue(actualRes);
-            };
-            // run a non-blocking body stream fetch
-            core.invoke('plugin:http|fetch_read_body', {
-                rid: responseRid,
-                streamChannel
-            }).catch((e) => {
-                controller.error(e);
-            });
-        }
-    });
-    const res = new Response(readableStreamBody, {
+    let body = null;
+    if (![101, 204, 205, 304].includes(status)) {
+        body = new ReadableStream({
+            start: (controller) => {
+                const streamChannel = new core.Channel();
+                streamChannel.onmessage = (res) => {
+                    // close early if aborted
+                    if (signal?.aborted) {
+                        controller.error(ERROR_REQUEST_CANCELLED);
+                        return;
+                    }
+                    const resUint8 = new Uint8Array(res);
+                    const lastByte = resUint8[resUint8.byteLength - 1];
+                    const actualRes = resUint8.slice(0, resUint8.byteLength - 1);
+                    // close when the signal to close (last byte is 1) is sent from the IPC.
+                    if (lastByte == 1) {
+                        controller.close();
+                        return;
+                    }
+                    controller.enqueue(actualRes);
+                };
+                // run a non-blocking body stream fetch
+                core.invoke('plugin:http|fetch_read_body', {
+                    rid: responseRid,
+                    streamChannel
+                }).catch((e) => {
+                    controller.error(e);
+                });
+            }
+        });
+    }
+    const res = new Response(body, {
         status,
         statusText
     });
diff --git a/dist-js/index.js b/dist-js/index.js
index 2613244aafb36e811b1b1abd8845fbf5afdd2b91..6a656e8826902ef579b132f5e99893d7302fc7fc 100644
--- a/dist-js/index.js
+++ b/dist-js/index.js
@@ -59,10 +59,10 @@ async function fetch(input, init) {
         delete init.danger;
     }
     const headers = init?.headers
-        ? init.headers instanceof Headers
-            ? init.headers
-            : new Headers(init.headers)
-        : new Headers();
+      ? init.headers instanceof Headers
+        ? init.headers
+        : new Headers(init.headers)
+      : new Headers();
     const req = new Request(input, init);
     const buffer = await req.arrayBuffer();
     const data = buffer.byteLength !== 0 ? Array.from(new Uint8Array(buffer)) : null;
@@ -74,10 +74,10 @@ async function fetch(input, init) {
         }
     }
     const headersArray = headers instanceof Headers
-        ? Array.from(headers.entries())
-        : Array.isArray(headers)
-            ? headers
-            : Object.entries(headers);
+      ? Array.from(headers.entries())
+      : Array.isArray(headers)
+        ? headers
+        : Object.entries(headers);
     // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
     const mappedHeaders = headersArray.map(([name, val]) => [
         name,
@@ -113,35 +113,38 @@ async function fetch(input, init) {
     const { status, statusText, url, headers: responseHeaders, rid: responseRid } = await invoke('plugin:http|fetch_send', {
         rid
     });
-    const readableStreamBody = new ReadableStream({
-        start: (controller) => {
-            const streamChannel = new Channel();
-            streamChannel.onmessage = (res) => {
-                // close early if aborted
-                if (signal?.aborted) {
-                    controller.error(ERROR_REQUEST_CANCELLED);
-                    return;
-                }
-                const resUint8 = new Uint8Array(res);
-                const lastByte = resUint8[resUint8.byteLength - 1];
-                const actualRes = resUint8.slice(0, resUint8.byteLength - 1);
-                // close when the signal to close (last byte is 1) is sent from the IPC.
-                if (lastByte == 1) {
-                    controller.close();
-                    return;
-                }
-                controller.enqueue(actualRes);
-            };
-            // run a non-blocking body stream fetch
-            invoke('plugin:http|fetch_read_body', {
-                rid: responseRid,
-                streamChannel
-            }).catch((e) => {
-                controller.error(e);
-            });
-        }
-    });
-    const res = new Response(readableStreamBody, {
+    let body = null;
+    if (![101, 204, 205, 304].includes(status)) {
+        body = new ReadableStream({
+            start: (controller) => {
+                const streamChannel = new Channel();
+                streamChannel.onmessage = (res) => {
+                    // close early if aborted
+                    if (signal?.aborted) {
+                        controller.error(ERROR_REQUEST_CANCELLED);
+                        return;
+                    }
+                    const resUint8 = new Uint8Array(res);
+                    const lastByte = resUint8[resUint8.byteLength - 1];
+                    const actualRes = resUint8.slice(0, resUint8.byteLength - 1);
+                    // close when the signal to close (last byte is 1) is sent from the IPC.
+                    if (lastByte == 1) {
+                        controller.close();
+                        return;
+                    }
+                    controller.enqueue(actualRes);
+                };
+                // run a non-blocking body stream fetch
+                invoke('plugin:http|fetch_read_body', {
+                    rid: responseRid,
+                    streamChannel
+                }).catch((e) => {
+                    controller.error(e);
+                });
+            }
+        });
+    }
+    const res = new Response(body, {
         status,
         statusText
     });
